// Package tidelift_api_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package tidelift_api_gen

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CycloneDxJsonBomFormat.
const (
	CycloneDX CycloneDxJsonBomFormat = "CycloneDX"
)

// Defines values for GenericQualityCheckStatus.
const (
	GenericQualityCheckStatusNoassertion GenericQualityCheckStatus = "noassertion"
	GenericQualityCheckStatusNotPassed   GenericQualityCheckStatus = "not_passed"
	GenericQualityCheckStatusPassed      GenericQualityCheckStatus = "passed"
	GenericQualityCheckStatusPending     GenericQualityCheckStatus = "pending"
)

// Defines values for PackageAppearsMaintainedAdditionalDataIsLiftedReason.
const (
	PackageIsLifted PackageAppearsMaintainedAdditionalDataIsLiftedReason = "package_is_lifted"
)

// Defines values for PackageAppearsMaintainedAdditionalDataMaintenanceAppearanceReason.
const (
	PackageAppearsMaintained   PackageAppearsMaintainedAdditionalDataMaintenanceAppearanceReason = "package_appears_maintained"
	PackageAppearsUnmaintained PackageAppearsMaintainedAdditionalDataMaintenanceAppearanceReason = "package_appears_unmaintained"
)

// Defines values for PackageAppearsMaintainedAdditionalDataMaintenanceAssessmentReason.
const (
	PackageIsMaintainedAssessedFalse PackageAppearsMaintainedAdditionalDataMaintenanceAssessmentReason = "package_is_maintained_assessed_false"
	PackageIsMaintainedAssessedTrue  PackageAppearsMaintainedAdditionalDataMaintenanceAssessmentReason = "package_is_maintained_assessed_true"
)

// Defines values for PackageAppearsMaintainedQualityCheckStatus.
const (
	PackageAppearsMaintainedQualityCheckStatusNoassertion PackageAppearsMaintainedQualityCheckStatus = "noassertion"
	PackageAppearsMaintainedQualityCheckStatusNotPassed   PackageAppearsMaintainedQualityCheckStatus = "not_passed"
	PackageAppearsMaintainedQualityCheckStatusPassed      PackageAppearsMaintainedQualityCheckStatus = "passed"
	PackageAppearsMaintainedQualityCheckStatusPending     PackageAppearsMaintainedQualityCheckStatus = "pending"
)

// Defines values for PackageAttestationStatementIncomeStreams0.
const (
	NOASSERTION PackageAttestationStatementIncomeStreams0 = "NOASSERTION"
)

// Defines values for PackageDetailAlternativePackagesType.
const (
	Alternative PackageDetailAlternativePackagesType = "alternative"
	Rename      PackageDetailAlternativePackagesType = "rename"
)

// Defines values for PackageDetailLicenseSource.
const (
	PackageDetailLicenseSourceCorrectedByTidelift      PackageDetailLicenseSource = "corrected_by_tidelift"
	PackageDetailLicenseSourceOverriddenByOrganization PackageDetailLicenseSource = "overridden_by_organization"
	PackageDetailLicenseSourceResearchedByTidelift     PackageDetailLicenseSource = "researched_by_tidelift"
	PackageDetailLicenseSourceTideliftResearching      PackageDetailLicenseSource = "tidelift_researching"
	PackageDetailLicenseSourceUnknown                  PackageDetailLicenseSource = "unknown"
	PackageDetailLicenseSourceValidSpdx                PackageDetailLicenseSource = "valid_spdx"
	PackageDetailLicenseSourceVerifiedByMaintainer     PackageDetailLicenseSource = "verified_by_maintainer"
)

// Defines values for PackageDetailQualityChecksDiscoverableSecurityPolicyStatus.
const (
	PackageDetailQualityChecksDiscoverableSecurityPolicyStatusNoassertion PackageDetailQualityChecksDiscoverableSecurityPolicyStatus = "noassertion"
	PackageDetailQualityChecksDiscoverableSecurityPolicyStatusNotPassed   PackageDetailQualityChecksDiscoverableSecurityPolicyStatus = "not_passed"
	PackageDetailQualityChecksDiscoverableSecurityPolicyStatusPassed      PackageDetailQualityChecksDiscoverableSecurityPolicyStatus = "passed"
	PackageDetailQualityChecksDiscoverableSecurityPolicyStatusPending     PackageDetailQualityChecksDiscoverableSecurityPolicyStatus = "pending"
)

// Defines values for PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus.
const (
	PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatusNoassertion PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus = "noassertion"
	PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatusNotPassed   PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus = "not_passed"
	PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatusPassed      PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus = "passed"
	PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatusPending     PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus = "pending"
)

// Defines values for PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus.
const (
	PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatusNoassertion PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus = "noassertion"
	PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatusNotPassed   PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus = "not_passed"
	PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatusPassed      PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus = "passed"
	PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatusPending     PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus = "pending"
)

// Defines values for PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus.
const (
	PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatusNoassertion PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus = "noassertion"
	PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatusNotPassed   PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus = "not_passed"
	PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatusPassed      PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus = "passed"
	PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatusPending     PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus = "pending"
)

// Defines values for PackageDetailQualityChecksPackageIsNotDeprecatedStatus.
const (
	PackageDetailQualityChecksPackageIsNotDeprecatedStatusNoassertion PackageDetailQualityChecksPackageIsNotDeprecatedStatus = "noassertion"
	PackageDetailQualityChecksPackageIsNotDeprecatedStatusNotPassed   PackageDetailQualityChecksPackageIsNotDeprecatedStatus = "not_passed"
	PackageDetailQualityChecksPackageIsNotDeprecatedStatusPassed      PackageDetailQualityChecksPackageIsNotDeprecatedStatus = "passed"
	PackageDetailQualityChecksPackageIsNotDeprecatedStatusPending     PackageDetailQualityChecksPackageIsNotDeprecatedStatus = "pending"
)

// Defines values for PackageDetailQualityChecksReleaseManagersAreReviewedStatus.
const (
	PackageDetailQualityChecksReleaseManagersAreReviewedStatusNoassertion PackageDetailQualityChecksReleaseManagersAreReviewedStatus = "noassertion"
	PackageDetailQualityChecksReleaseManagersAreReviewedStatusNotPassed   PackageDetailQualityChecksReleaseManagersAreReviewedStatus = "not_passed"
	PackageDetailQualityChecksReleaseManagersAreReviewedStatusPassed      PackageDetailQualityChecksReleaseManagersAreReviewedStatus = "passed"
	PackageDetailQualityChecksReleaseManagersAreReviewedStatusPending     PackageDetailQualityChecksReleaseManagersAreReviewedStatus = "pending"
)

// Defines values for PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatus.
const (
	PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatusNoassertion PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatus = "noassertion"
	PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatusNotPassed   PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatus = "not_passed"
	PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatusPassed      PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatus = "passed"
	PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatusPending     PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatus = "pending"
)

// Defines values for PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus.
const (
	PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatusNoassertion PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus = "noassertion"
	PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatusNotPassed   PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus = "not_passed"
	PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatusPassed      PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus = "passed"
	PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatusPending     PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus = "pending"
)

// Defines values for PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatus.
const (
	PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatusNoassertion PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatus = "noassertion"
	PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatusNotPassed   PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatus = "not_passed"
	PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatusPassed      PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatus = "passed"
	PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatusPending     PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatus = "pending"
)

// Defines values for PackageDetailRepositorySource.
const (
	PackageDetailRepositorySourceHumanVerified  PackageDetailRepositorySource = "human_verified"
	PackageDetailRepositorySourcePackageManager PackageDetailRepositorySource = "package_manager"
)

// Defines values for PackageDetailRepositoryStatisticsStatus.
const (
	Active       PackageDetailRepositoryStatisticsStatus = "Active"
	Removed      PackageDetailRepositoryStatisticsStatus = "Removed"
	Unmaintained PackageDetailRepositoryStatisticsStatus = "Unmaintained"
)

// Defines values for PackageDetailVersioningScheme.
const (
	Calver PackageDetailVersioningScheme = "calver"
	Maven  PackageDetailVersioningScheme = "maven"
	Osgi   PackageDetailVersioningScheme = "osgi"
	Other  PackageDetailVersioningScheme = "other"
	Pep440 PackageDetailVersioningScheme = "pep440"
	Semver PackageDetailVersioningScheme = "semver"
)

// Defines values for PackageIsNotEOLQualityCheckAdditionalDataReason.
const (
	PackageHasFutureEndOfLife       PackageIsNotEOLQualityCheckAdditionalDataReason = "package_has_future_end_of_life"
	PackageHasNoKnownEndOfLife      PackageIsNotEOLQualityCheckAdditionalDataReason = "package_has_no_known_end_of_life"
	PackageIsRenamed                PackageIsNotEOLQualityCheckAdditionalDataReason = "package_is_renamed"
	PackageIsUnknown                PackageIsNotEOLQualityCheckAdditionalDataReason = "package_is_unknown"
	PackageRepositoryIsUnmaintained PackageIsNotEOLQualityCheckAdditionalDataReason = "package_repository_is_unmaintained"
)

// Defines values for PackageIsNotEOLQualityCheckStatus.
const (
	PackageIsNotEOLQualityCheckStatusNoassertion PackageIsNotEOLQualityCheckStatus = "noassertion"
	PackageIsNotEOLQualityCheckStatusNotPassed   PackageIsNotEOLQualityCheckStatus = "not_passed"
	PackageIsNotEOLQualityCheckStatusPassed      PackageIsNotEOLQualityCheckStatus = "passed"
	PackageIsNotEOLQualityCheckStatusPending     PackageIsNotEOLQualityCheckStatus = "pending"
)

// Defines values for QualityChecksDiscoverableSecurityPolicyStatus.
const (
	QualityChecksDiscoverableSecurityPolicyStatusNoassertion QualityChecksDiscoverableSecurityPolicyStatus = "noassertion"
	QualityChecksDiscoverableSecurityPolicyStatusNotPassed   QualityChecksDiscoverableSecurityPolicyStatus = "not_passed"
	QualityChecksDiscoverableSecurityPolicyStatusPassed      QualityChecksDiscoverableSecurityPolicyStatus = "passed"
	QualityChecksDiscoverableSecurityPolicyStatusPending     QualityChecksDiscoverableSecurityPolicyStatus = "pending"
)

// Defines values for QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus.
const (
	QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatusNoassertion QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus = "noassertion"
	QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatusNotPassed   QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus = "not_passed"
	QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatusPassed      QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus = "passed"
	QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatusPending     QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus = "pending"
)

// Defines values for QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus.
const (
	QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatusNoassertion QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus = "noassertion"
	QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatusNotPassed   QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus = "not_passed"
	QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatusPassed      QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus = "passed"
	QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatusPending     QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus = "pending"
)

// Defines values for QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus.
const (
	QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatusNoassertion QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus = "noassertion"
	QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatusNotPassed   QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus = "not_passed"
	QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatusPassed      QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus = "passed"
	QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatusPending     QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus = "pending"
)

// Defines values for QualityChecksPackageIsNotDeprecatedStatus.
const (
	QualityChecksPackageIsNotDeprecatedStatusNoassertion QualityChecksPackageIsNotDeprecatedStatus = "noassertion"
	QualityChecksPackageIsNotDeprecatedStatusNotPassed   QualityChecksPackageIsNotDeprecatedStatus = "not_passed"
	QualityChecksPackageIsNotDeprecatedStatusPassed      QualityChecksPackageIsNotDeprecatedStatus = "passed"
	QualityChecksPackageIsNotDeprecatedStatusPending     QualityChecksPackageIsNotDeprecatedStatus = "pending"
)

// Defines values for QualityChecksReleaseManagersAreReviewedStatus.
const (
	QualityChecksReleaseManagersAreReviewedStatusNoassertion QualityChecksReleaseManagersAreReviewedStatus = "noassertion"
	QualityChecksReleaseManagersAreReviewedStatusNotPassed   QualityChecksReleaseManagersAreReviewedStatus = "not_passed"
	QualityChecksReleaseManagersAreReviewedStatusPassed      QualityChecksReleaseManagersAreReviewedStatus = "passed"
	QualityChecksReleaseManagersAreReviewedStatusPending     QualityChecksReleaseManagersAreReviewedStatus = "pending"
)

// Defines values for QualityChecksReleasesAreDiscoverableUpstreamStatus.
const (
	QualityChecksReleasesAreDiscoverableUpstreamStatusNoassertion QualityChecksReleasesAreDiscoverableUpstreamStatus = "noassertion"
	QualityChecksReleasesAreDiscoverableUpstreamStatusNotPassed   QualityChecksReleasesAreDiscoverableUpstreamStatus = "not_passed"
	QualityChecksReleasesAreDiscoverableUpstreamStatusPassed      QualityChecksReleasesAreDiscoverableUpstreamStatus = "passed"
	QualityChecksReleasesAreDiscoverableUpstreamStatusPending     QualityChecksReleasesAreDiscoverableUpstreamStatus = "pending"
)

// Defines values for QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus.
const (
	QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatusNoassertion QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus = "noassertion"
	QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatusNotPassed   QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus = "not_passed"
	QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatusPassed      QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus = "passed"
	QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatusPending     QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus = "pending"
)

// Defines values for QualityChecksTwoFactorAuthenticationForPackageManagerStatus.
const (
	Noassertion QualityChecksTwoFactorAuthenticationForPackageManagerStatus = "noassertion"
	NotPassed   QualityChecksTwoFactorAuthenticationForPackageManagerStatus = "not_passed"
	Passed      QualityChecksTwoFactorAuthenticationForPackageManagerStatus = "passed"
	Pending     QualityChecksTwoFactorAuthenticationForPackageManagerStatus = "pending"
)

// Defines values for ReleaseDetailLicenseSource.
const (
	ReleaseDetailLicenseSourceCorrectedByTidelift      ReleaseDetailLicenseSource = "corrected_by_tidelift"
	ReleaseDetailLicenseSourceOverriddenByOrganization ReleaseDetailLicenseSource = "overridden_by_organization"
	ReleaseDetailLicenseSourceResearchedByTidelift     ReleaseDetailLicenseSource = "researched_by_tidelift"
	ReleaseDetailLicenseSourceTideliftResearching      ReleaseDetailLicenseSource = "tidelift_researching"
	ReleaseDetailLicenseSourceValidSpdx                ReleaseDetailLicenseSource = "valid_spdx"
	ReleaseDetailLicenseSourceVerifiedByMaintainer     ReleaseDetailLicenseSource = "verified_by_maintainer"
)

// Defines values for ReleaseDetailRepositorySource.
const (
	ReleaseDetailRepositorySourceHumanVerified  ReleaseDetailRepositorySource = "human_verified"
	ReleaseDetailRepositorySourcePackageManager ReleaseDetailRepositorySource = "package_manager"
)

// Defines values for TideliftPackageRecommendation.
const (
	TideliftPackageRecommendationCautionAdvised TideliftPackageRecommendation = "caution_advised"
	TideliftPackageRecommendationNeutral        TideliftPackageRecommendation = "neutral"
	TideliftPackageRecommendationNotAssessed    TideliftPackageRecommendation = "not_assessed"
	TideliftPackageRecommendationNotRecommended TideliftPackageRecommendation = "not_recommended"
	TideliftPackageRecommendationRecommended    TideliftPackageRecommendation = "recommended"
)

// Defines values for TideliftReleaseRecommendation.
const (
	TideliftReleaseRecommendationNotAssessed    TideliftReleaseRecommendation = "not_assessed"
	TideliftReleaseRecommendationNotRecommended TideliftReleaseRecommendation = "not_recommended"
	TideliftReleaseRecommendationRecommended    TideliftReleaseRecommendation = "recommended"
)

// Defines values for VulnerabilityAffectedPackagesRecommendation.
const (
	Ignore              VulnerabilityAffectedPackagesRecommendation = "ignore"
	Upgrade             VulnerabilityAffectedPackagesRecommendation = "upgrade"
	UpgradeOrWorkaround VulnerabilityAffectedPackagesRecommendation = "upgrade_or_workaround"
)

// Defines values for SbomTypeParam.
const (
	SbomTypeParamCyclonedx SbomTypeParam = "cyclonedx"
	SbomTypeParamSpdx      SbomTypeParam = "spdx"
)

// Defines values for ReleaseSbomParamsSbomType.
const (
	ReleaseSbomParamsSbomTypeCyclonedx ReleaseSbomParamsSbomType = "cyclonedx"
	ReleaseSbomParamsSbomTypeSpdx      ReleaseSbomParamsSbomType = "spdx"
)

// CycloneDxJson defines model for CycloneDxJson.
type CycloneDxJson struct {
	BomFormat    *CycloneDxJsonBomFormat   `json:"bomFormat,omitempty"`
	Components   *[]map[string]interface{} `json:"components,omitempty"`
	Dependencies *[]map[string]interface{} `json:"dependencies,omitempty"`
	Metadata     *map[string]interface{}   `json:"metadata,omitempty"`
	SerialNumber *string                   `json:"serialNumber,omitempty"`
	SpecVersion  *string                   `json:"specVersion,omitempty"`
}

// CycloneDxJsonBomFormat defines model for CycloneDxJson.BomFormat.
type CycloneDxJsonBomFormat string

// CycloneDxXml defines model for CycloneDxXml.
type CycloneDxXml struct {
	Components   *[]map[string]interface{} `json:"components,omitempty"`
	Dependencies *[]map[string]interface{} `json:"dependencies,omitempty"`
	Metadata     *map[string]interface{}   `json:"metadata,omitempty"`
}

// GenericQualityCheck defines model for GenericQualityCheck.
type GenericQualityCheck struct {
	AdditionalData *map[string]interface{}   `json:"additional_data"`
	Status         GenericQualityCheckStatus `json:"status"`
}

// GenericQualityCheckStatus defines model for GenericQualityCheck.Status.
type GenericQualityCheckStatus string

// Package defines model for Package.
type Package struct {
	Name     string `json:"name"`
	Platform string `json:"platform"`
}

// PackageAppearsMaintainedAdditionalDataIsLifted defines model for PackageAppearsMaintainedAdditionalData--is-lifted.
type PackageAppearsMaintainedAdditionalDataIsLifted struct {
	// Reason Tidelift is partnering with the maintainer of this package to ensure its continued maintenance.
	Reason PackageAppearsMaintainedAdditionalDataIsLiftedReason `json:"reason"`
}

// PackageAppearsMaintainedAdditionalDataIsLiftedReason Tidelift is partnering with the maintainer of this package to ensure its continued maintenance.
type PackageAppearsMaintainedAdditionalDataIsLiftedReason string

// PackageAppearsMaintainedAdditionalDataMaintenanceAppearance defines model for PackageAppearsMaintainedAdditionalData--maintenance-appearance.
type PackageAppearsMaintainedAdditionalDataMaintenanceAppearance struct {
	// ContributorsInPastYear Whether there has been any contributors to the package's source repository in the past year.
	ContributorsInPastYear bool `json:"contributors_in_past_year"`

	// FrequentPackageActivity Whether at least 1/3 of issues and pull requests must have been closed in the past year.
	FrequentPackageActivity bool `json:"frequent_package_activity"`

	// Reason Tidelift checks upstream source repository and release activity to determine maintenace activity for the package.
	// If the source repository has been marked archived or unmaintained, it fails this check.
	// Otherwise, Tidelift considers a package to appear unmaintained if all of the following are `false`: `contributors_in_past_year`
	// `frequent_package_activity`, `recent_commits`, and `recent_latest_release`.
	Reason PackageAppearsMaintainedAdditionalDataMaintenanceAppearanceReason `json:"reason"`

	// RecentCommits Whether there has been a commit to the package's source repository in the past year.
	RecentCommits bool `json:"recent_commits"`

	// RecentLatestRelease Whether there has been a release of the package in the past 6 months.
	RecentLatestRelease bool `json:"recent_latest_release"`

	// RepositoryMarkedUnmaintained Whether the package's source repository been archived or otherwise marked unmaintained.
	RepositoryMarkedUnmaintained *bool `json:"repository_marked_unmaintained,omitempty"`
}

// PackageAppearsMaintainedAdditionalDataMaintenanceAppearanceReason Tidelift checks upstream source repository and release activity to determine maintenace activity for the package.
// If the source repository has been marked archived or unmaintained, it fails this check.
// Otherwise, Tidelift considers a package to appear unmaintained if all of the following are `false`: `contributors_in_past_year`
// `frequent_package_activity`, `recent_commits`, and `recent_latest_release`.
type PackageAppearsMaintainedAdditionalDataMaintenanceAppearanceReason string

// PackageAppearsMaintainedAdditionalDataMaintenanceAssessment defines model for PackageAppearsMaintainedAdditionalData--maintenance-assessment.
type PackageAppearsMaintainedAdditionalDataMaintenanceAssessment struct {
	// IsMaintained The manual assessment of the package's maintenance status.
	IsMaintained bool `json:"is_maintained"`

	// IsMaintainedUpdatedAt The time at which the package's maintenance status was manually assessed.
	IsMaintainedUpdatedAt time.Time `json:"is_maintained_updated_at"`

	// Reason Tidelift has manually assessed this package's maintenance status.
	Reason PackageAppearsMaintainedAdditionalDataMaintenanceAssessmentReason `json:"reason"`
}

// PackageAppearsMaintainedAdditionalDataMaintenanceAssessmentReason Tidelift has manually assessed this package's maintenance status.
type PackageAppearsMaintainedAdditionalDataMaintenanceAssessmentReason string

// PackageAppearsMaintainedQualityCheck The project lacks auto-detectable evidence of recent activity
type PackageAppearsMaintainedQualityCheck struct {
	AdditionalData PackageAppearsMaintainedQualityCheck_AdditionalData `json:"additional_data"`
	Status         PackageAppearsMaintainedQualityCheckStatus          `json:"status"`
}

// PackageAppearsMaintainedQualityCheckAdditionalData3 defines model for .
type PackageAppearsMaintainedQualityCheckAdditionalData3 = map[string]interface{}

// PackageAppearsMaintainedQualityCheck_AdditionalData defines model for PackageAppearsMaintainedQualityCheck.AdditionalData.
type PackageAppearsMaintainedQualityCheck_AdditionalData struct {
	union json.RawMessage
}

// PackageAppearsMaintainedQualityCheckStatus defines model for PackageAppearsMaintainedQualityCheck.Status.
type PackageAppearsMaintainedQualityCheckStatus string

// PackageAttestationStatement defines model for PackageAttestationStatement.
type PackageAttestationStatement struct {
	CleanReleaseAvailable    string                                    `json:"CleanReleaseAvailable"`
	CodeReviewPractice       string                                    `json:"CodeReviewPractice"`
	DependenciesAreManaged   string                                    `json:"DependenciesAreManaged"`
	DocumentedBuildPractices string                                    `json:"DocumentedBuildPractices"`
	FixedVulnerabilities     string                                    `json:"FixedVulnerabilities"`
	FuzzingPractice          string                                    `json:"FuzzingPractice"`
	IncomeStreams            PackageAttestationStatement_IncomeStreams `json:"IncomeStreams"`
	KnownReleasesURL         string                                    `json:"KnownReleasesURL"`
	KnownVulnerabilitiesURL  string                                    `json:"KnownVulnerabilitiesURL"`
	LatestStableRelease      string                                    `json:"LatestStableRelease"`
	MultipleMaintainers      string                                    `json:"MultipleMaintainers"`
	NoBinariesInRepository   string                                    `json:"NoBinariesInRepository"`
	PURL                     string                                    `json:"PURL"`
	PackageManagerMFAEnabled string                                    `json:"PackageManagerMFAEnabled"`
	PackageName              string                                    `json:"PackageName"`
	PackagePlatform          string                                    `json:"PackagePlatform"`
	PackageSecurityContact   string                                    `json:"PackageSecurityContact"`
	PackageSecurityPolicyURL string                                    `json:"PackageSecurityPolicyURL"`
	PackageStatus            struct {
		LastModifiedDateTimeUTC time.Time `json:"LastModifiedDateTimeUTC"`
		Status                  string    `json:"Status"`
	} `json:"PackageStatus"`
	ReleasesDigitallySigned *string  `json:"ReleasesDigitallySigned,omitempty"`
	ReleasesInUse           []string `json:"ReleasesInUse"`
	SBOM                    []struct {
		DigitalSignatureURL string `json:"DigitalSignatureURL"`
		Type                string `json:"Type"`
		URL                 string `json:"URL"`
	} `json:"SBOM"`
	SDLCEvidenceDataURL      string `json:"SDLCEvidenceDataURL"`
	SDLCPolicyURL            string `json:"SDLCPolicyURL"`
	SPDXLicenseLatestRelease string `json:"SPDXLicenseLatestRelease"`
	SecurityResponsive       string `json:"SecurityResponsive"`
	SourceRepoMFAEnabled     string `json:"SourceRepoMFAEnabled"`
	SuccessionPlan           string `json:"SuccessionPlan"`
	UpstreamRepositoryURL    string `json:"UpstreamRepositoryURL"`
}

// PackageAttestationStatementIncomeStreams0 defines model for PackageAttestationStatement.IncomeStreams.0.
type PackageAttestationStatementIncomeStreams0 string

// PackageAttestationStatementIncomeStreams1 defines model for .
type PackageAttestationStatementIncomeStreams1 = []struct {
	EvidenceURL             string    `json:"EvidenceURL"`
	LastModifiedDateTimeUTC time.Time `json:"LastModifiedDateTimeUTC"`
	Type                    string    `json:"Type"`
}

// PackageAttestationStatement_IncomeStreams defines model for PackageAttestationStatement.IncomeStreams.
type PackageAttestationStatement_IncomeStreams struct {
	union json.RawMessage
}

// PackageDetail defines model for PackageDetail.
type PackageDetail struct {
	// AlternativePackages List of alternative packages that could be used in place of this package
	AlternativePackages []struct {
		// Name Name of the other package
		Name string `json:"name"`

		// Type How the alternative package relates to the original package
		Type PackageDetailAlternativePackagesType `json:"type"`
	} `json:"alternative_packages"`

	// ContributorsCount Number of contributors to the upstream source repository, if available
	ContributorsCount *int `json:"contributors_count"`

	// Description Package description taken from the upstream package manager data
	Description *string `json:"description"`

	// IsLifted Whether Tidelift partners with the maintainers of this package
	IsLifted bool `json:"is_lifted"`

	// LastChangedOn When the package record last was updated by new information
	LastChangedOn            *openapi_types.Date `json:"last_changed_on"`
	LatestRecommendedRelease struct {
		PublishedAt *time.Time `json:"published_at"`
		Version     *string    `json:"version"`
	} `json:"latest_recommended_release"`
	LatestRelease struct {
		PublishedAt *time.Time `json:"published_at"`
		Version     *string    `json:"version"`
	} `json:"latest_release"`
	LatestStableRelease struct {
		PublishedAt *time.Time `json:"published_at"`
		Version     *string    `json:"version"`
	} `json:"latest_stable_release"`
	License struct {
		// Expression An [SPDX expression](https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/)
		Expression *string `json:"expression"`

		// Source The source of the license information, if the license is known.
		Source *PackageDetailLicenseSource `json:"source"`
	} `json:"license"`

	// Name The canonical name of the package (may be adjusted for casing or hyphen vs underscore for example)
	Name string `json:"name"`

	// PackageManagerUrl Link to this package on the package manager website
	PackageManagerUrl *string `json:"package_manager_url"`

	// Platform The package manager platform, all lowercase.
	Platform string `json:"platform"`

	// Purl An identifier for the package following the [package URL (purl) specification](https://github.com/package-url/purl-spec)
	Purl          string `json:"purl"`
	QualityChecks struct {
		DiscoverableSecurityPolicy struct {
			AdditionalData *map[string]interface{}                                    `json:"additional_data"`
			Status         PackageDetailQualityChecksDiscoverableSecurityPolicyStatus `json:"status"`
		} `json:"discoverable_security_policy"`
		NoKnownIssuesInDependenciesForLatestRelease struct {
			AdditionalData *map[string]interface{}                                                     `json:"additional_data"`
			Status         PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus `json:"status"`
		} `json:"no_known_issues_in_dependencies_for_latest_release"`
		NoKnownVulnerabilitiesOnLatestRelease struct {
			AdditionalData *map[string]interface{}                                               `json:"additional_data"`
			Status         PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus `json:"status"`
		} `json:"no_known_vulnerabilities_on_latest_release"`

		// PackageAppearsMaintained The project lacks auto-detectable evidence of recent activity
		PackageAppearsMaintained                       PackageAppearsMaintainedQualityCheck `json:"package_appears_maintained"`
		PackageHasAStableReleaseGreaterThanTwoYearsOld struct {
			AdditionalData *map[string]interface{}                                                        `json:"additional_data"`
			Status         PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus `json:"status"`
		} `json:"package_has_a_stable_release_greater_than_two_years_old"`
		PackageIsNotDeprecated struct {
			AdditionalData *map[string]interface{}                                `json:"additional_data"`
			Status         PackageDetailQualityChecksPackageIsNotDeprecatedStatus `json:"status"`
		} `json:"package_is_not_deprecated"`

		// PackageIsNotEol The project does not have an active end-of-life notification.
		PackageIsNotEol            PackageIsNotEOLQualityCheck `json:"package_is_not_eol"`
		ReleaseManagersAreReviewed struct {
			AdditionalData *map[string]interface{}                                    `json:"additional_data"`
			Status         PackageDetailQualityChecksReleaseManagersAreReviewedStatus `json:"status"`
		} `json:"release_managers_are_reviewed"`
		ReleasesAreDiscoverableUpstream struct {
			AdditionalData *map[string]interface{}                                         `json:"additional_data"`
			Status         PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatus `json:"status"`
		} `json:"releases_are_discoverable_upstream"`
		TwoFactorAuthenticationAtSourceRepository struct {
			AdditionalData *map[string]interface{}                                                   `json:"additional_data"`
			Status         PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus `json:"status"`
		} `json:"two_factor_authentication_at_source_repository"`
		TwoFactorAuthenticationForPackageManager struct {
			AdditionalData *map[string]interface{}                                                  `json:"additional_data"`
			Status         PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatus `json:"status"`
		} `json:"two_factor_authentication_for_package_manager"`
	} `json:"quality_checks"`

	// Releases An array of all known public releases of the package
	Releases []struct {
		// PublishedAt Time that the release was published to the package manager
		PublishedAt            *time.Time                     `json:"published_at"`
		TideliftRecommendation *TideliftReleaseRecommendation `json:"tidelift_recommendation"`

		// Version The release's name
		Version string `json:"version"`
	} `json:"releases"`

	// Repository The source code repository where the package is maintained
	Repository struct {
		Source PackageDetailRepositorySource `json:"source"`
		Url    *string                       `json:"url"`
	} `json:"repository"`

	// RepositoryStatistics Statistics about the package's source code repository that can be used to assess upstream activity and maintenance
	RepositoryStatistics *struct {
		// Last52WeeksContributors Number of distinct contributors in the past year
		Last52WeeksContributors *int `json:"last_52_weeks_contributors"`

		// LastCommitAt Date of the last commit
		LastCommitAt *openapi_types.Date `json:"last_commit_at"`

		// OneYearClosedIssues How many issues have been closed in the last year
		OneYearClosedIssues *int `json:"one_year_closed_issues"`

		// OneYearClosedPullRequests How many pull requests have been closed in the past year
		OneYearClosedPullRequests *int `json:"one_year_closed_pull_requests"`

		// OneYearTotalIssues How many issues were opened in the last year
		OneYearTotalIssues *int `json:"one_year_total_issues"`

		// OneYearTotalPullRequests How many pull requests were opened in the last year
		OneYearTotalPullRequests *int `json:"one_year_total_pull_requests"`

		// Status Source repositories may be active, archived (Unmaintained), or deleted (Removed); Tidelift may add other statuses in the future
		Status PackageDetailRepositoryStatisticsStatus `json:"status"`
	} `json:"repository_statistics"`

	// SdlcEvidence If available, a URL that may help figure out the project's software development lifecycle policies
	SdlcEvidence *string `json:"sdlc_evidence"`

	// SdlcPolicy If available, a URL where the project explains its software development lifecycle policy (for example, which release streams are still receiving security updates)
	SdlcPolicy *string `json:"sdlc_policy"`

	// SecurityPolicyUrl If available, a url for the package's upstream security reporting policy
	SecurityPolicyUrl             *string                               `json:"security_policy_url"`
	TideliftRecommendation        *TideliftPackageRecommendation        `json:"tidelift_recommendation"`
	TideliftRecommendationReasons *TideliftPackageRecommendationReasons `json:"tidelift_recommendation_reasons,omitempty"`

	// VersioningScheme The version numbering rules that the package intends to use; Tidelift may add new possible values for this field over time
	VersioningScheme PackageDetailVersioningScheme `json:"versioning_scheme"`
}

// PackageDetailAlternativePackagesType How the alternative package relates to the original package
type PackageDetailAlternativePackagesType string

// PackageDetailLicenseSource The source of the license information, if the license is known.
type PackageDetailLicenseSource string

// PackageDetailQualityChecksDiscoverableSecurityPolicyStatus defines model for PackageDetail.QualityChecks.DiscoverableSecurityPolicy.Status.
type PackageDetailQualityChecksDiscoverableSecurityPolicyStatus string

// PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus defines model for PackageDetail.QualityChecks.NoKnownIssuesInDependenciesForLatestRelease.Status.
type PackageDetailQualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus string

// PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus defines model for PackageDetail.QualityChecks.NoKnownVulnerabilitiesOnLatestRelease.Status.
type PackageDetailQualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus string

// PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus defines model for PackageDetail.QualityChecks.PackageHasAStableReleaseGreaterThanTwoYearsOld.Status.
type PackageDetailQualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus string

// PackageDetailQualityChecksPackageIsNotDeprecatedStatus defines model for PackageDetail.QualityChecks.PackageIsNotDeprecated.Status.
type PackageDetailQualityChecksPackageIsNotDeprecatedStatus string

// PackageDetailQualityChecksReleaseManagersAreReviewedStatus defines model for PackageDetail.QualityChecks.ReleaseManagersAreReviewed.Status.
type PackageDetailQualityChecksReleaseManagersAreReviewedStatus string

// PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatus defines model for PackageDetail.QualityChecks.ReleasesAreDiscoverableUpstream.Status.
type PackageDetailQualityChecksReleasesAreDiscoverableUpstreamStatus string

// PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus defines model for PackageDetail.QualityChecks.TwoFactorAuthenticationAtSourceRepository.Status.
type PackageDetailQualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus string

// PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatus defines model for PackageDetail.QualityChecks.TwoFactorAuthenticationForPackageManager.Status.
type PackageDetailQualityChecksTwoFactorAuthenticationForPackageManagerStatus string

// PackageDetailRepositorySource defines model for PackageDetail.Repository.Source.
type PackageDetailRepositorySource string

// PackageDetailRepositoryStatisticsStatus Source repositories may be active, archived (Unmaintained), or deleted (Removed); Tidelift may add other statuses in the future
type PackageDetailRepositoryStatisticsStatus string

// PackageDetailVersioningScheme The version numbering rules that the package intends to use; Tidelift may add new possible values for this field over time
type PackageDetailVersioningScheme string

// PackageDetailRelease defines model for PackageDetailRelease.
type PackageDetailRelease struct {
	PublishedAt *time.Time `json:"published_at"`
	Version     *string    `json:"version"`
}

// PackageIsNotEOLQualityCheck The project does not have an active end-of-life notification.
type PackageIsNotEOLQualityCheck struct {
	AdditionalData struct {
		// EffectiveOn The ISO 8601 formatted date at which the package will be considered end-of-life.
		EffectiveOn *openapi_types.Date `json:"effective_on"`

		// EolReferenceFound If Tidelift has a known end-of-life effective date from a published source.
		EolReferenceFound bool `json:"eol_reference_found"`

		// NoPlannedMaintenance If the package's deprecation status and repository activity indicates no further updates should be expected.
		NoPlannedMaintenance bool `json:"no_planned_maintenance"`

		// PackageRenamedTo The packages that this package was renamed to.
		PackageRenamedTo []struct {
			Name     *string `json:"name,omitempty"`
			Platform *string `json:"platform,omitempty"`
		} `json:"package_renamed_to"`

		// Reason The reason Tidelift has decided the package's end-of-life status.
		Reason PackageIsNotEOLQualityCheckAdditionalDataReason `json:"reason"`

		// ReferenceUrl The URL which indicates that the package will be end-of-life.
		ReferenceUrl *string `json:"reference_url"`
	} `json:"additional_data"`
	Status PackageIsNotEOLQualityCheckStatus `json:"status"`
}

// PackageIsNotEOLQualityCheckAdditionalDataReason The reason Tidelift has decided the package's end-of-life status.
type PackageIsNotEOLQualityCheckAdditionalDataReason string

// PackageIsNotEOLQualityCheckStatus defines model for PackageIsNotEOLQualityCheck.Status.
type PackageIsNotEOLQualityCheckStatus string

// PackageList defines model for PackageList.
type PackageList struct {
	Results *[]PackageWithPurl `json:"results,omitempty"`
}

// PackageWithHint defines model for PackageWithHint.
type PackageWithHint struct {
	Hint     *string `json:"hint,omitempty"`
	Name     string  `json:"name"`
	Platform string  `json:"platform"`
}

// PackageWithPurl defines model for PackageWithPurl.
type PackageWithPurl struct {
	Name     string  `json:"name"`
	Platform string  `json:"platform"`
	Purl     *string `json:"purl,omitempty"`
}

// PaginationEnvelope defines model for PaginationEnvelope.
type PaginationEnvelope struct {
	CurrentPage int  `json:"current_page"`
	NextPage    *int `json:"next_page"`
	PerPage     int  `json:"per_page"`
	PrevPage    *int `json:"prev_page"`
	TotalCount  int  `json:"total_count"`
	TotalPages  int  `json:"total_pages"`
}

// QualityChecks defines model for QualityChecks.
type QualityChecks struct {
	DiscoverableSecurityPolicy struct {
		AdditionalData *map[string]interface{}                       `json:"additional_data"`
		Status         QualityChecksDiscoverableSecurityPolicyStatus `json:"status"`
	} `json:"discoverable_security_policy"`
	NoKnownIssuesInDependenciesForLatestRelease struct {
		AdditionalData *map[string]interface{}                                        `json:"additional_data"`
		Status         QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus `json:"status"`
	} `json:"no_known_issues_in_dependencies_for_latest_release"`
	NoKnownVulnerabilitiesOnLatestRelease struct {
		AdditionalData *map[string]interface{}                                  `json:"additional_data"`
		Status         QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus `json:"status"`
	} `json:"no_known_vulnerabilities_on_latest_release"`

	// PackageAppearsMaintained The project lacks auto-detectable evidence of recent activity
	PackageAppearsMaintained                       PackageAppearsMaintainedQualityCheck `json:"package_appears_maintained"`
	PackageHasAStableReleaseGreaterThanTwoYearsOld struct {
		AdditionalData *map[string]interface{}                                           `json:"additional_data"`
		Status         QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus `json:"status"`
	} `json:"package_has_a_stable_release_greater_than_two_years_old"`
	PackageIsNotDeprecated struct {
		AdditionalData *map[string]interface{}                   `json:"additional_data"`
		Status         QualityChecksPackageIsNotDeprecatedStatus `json:"status"`
	} `json:"package_is_not_deprecated"`

	// PackageIsNotEol The project does not have an active end-of-life notification.
	PackageIsNotEol            PackageIsNotEOLQualityCheck `json:"package_is_not_eol"`
	ReleaseManagersAreReviewed struct {
		AdditionalData *map[string]interface{}                       `json:"additional_data"`
		Status         QualityChecksReleaseManagersAreReviewedStatus `json:"status"`
	} `json:"release_managers_are_reviewed"`
	ReleasesAreDiscoverableUpstream struct {
		AdditionalData *map[string]interface{}                            `json:"additional_data"`
		Status         QualityChecksReleasesAreDiscoverableUpstreamStatus `json:"status"`
	} `json:"releases_are_discoverable_upstream"`
	TwoFactorAuthenticationAtSourceRepository struct {
		AdditionalData *map[string]interface{}                                      `json:"additional_data"`
		Status         QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus `json:"status"`
	} `json:"two_factor_authentication_at_source_repository"`
	TwoFactorAuthenticationForPackageManager struct {
		AdditionalData *map[string]interface{}                                     `json:"additional_data"`
		Status         QualityChecksTwoFactorAuthenticationForPackageManagerStatus `json:"status"`
	} `json:"two_factor_authentication_for_package_manager"`
}

// QualityChecksDiscoverableSecurityPolicyStatus defines model for QualityChecks.DiscoverableSecurityPolicy.Status.
type QualityChecksDiscoverableSecurityPolicyStatus string

// QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus defines model for QualityChecks.NoKnownIssuesInDependenciesForLatestRelease.Status.
type QualityChecksNoKnownIssuesInDependenciesForLatestReleaseStatus string

// QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus defines model for QualityChecks.NoKnownVulnerabilitiesOnLatestRelease.Status.
type QualityChecksNoKnownVulnerabilitiesOnLatestReleaseStatus string

// QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus defines model for QualityChecks.PackageHasAStableReleaseGreaterThanTwoYearsOld.Status.
type QualityChecksPackageHasAStableReleaseGreaterThanTwoYearsOldStatus string

// QualityChecksPackageIsNotDeprecatedStatus defines model for QualityChecks.PackageIsNotDeprecated.Status.
type QualityChecksPackageIsNotDeprecatedStatus string

// QualityChecksReleaseManagersAreReviewedStatus defines model for QualityChecks.ReleaseManagersAreReviewed.Status.
type QualityChecksReleaseManagersAreReviewedStatus string

// QualityChecksReleasesAreDiscoverableUpstreamStatus defines model for QualityChecks.ReleasesAreDiscoverableUpstream.Status.
type QualityChecksReleasesAreDiscoverableUpstreamStatus string

// QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus defines model for QualityChecks.TwoFactorAuthenticationAtSourceRepository.Status.
type QualityChecksTwoFactorAuthenticationAtSourceRepositoryStatus string

// QualityChecksTwoFactorAuthenticationForPackageManagerStatus defines model for QualityChecks.TwoFactorAuthenticationForPackageManager.Status.
type QualityChecksTwoFactorAuthenticationForPackageManagerStatus string

// Release defines model for Release.
type Release struct {
	Name     string `json:"name"`
	Platform string `json:"platform"`
	Version  string `json:"version"`
}

// ReleaseDetail defines model for ReleaseDetail.
type ReleaseDetail struct {
	License *struct {
		Expression *string                     `json:"expression,omitempty"`
		Source     *ReleaseDetailLicenseSource `json:"source,omitempty"`
	} `json:"license,omitempty"`
	Name                      *string `json:"name,omitempty"`
	NearestRecommendedRelease *struct {
		PublishedAt *time.Time `json:"published_at"`
		Version     *string    `json:"version,omitempty"`
	} `json:"nearest_recommended_release"`
	Platform    *string `json:"platform,omitempty"`
	PublishedAt *string `json:"published_at"`
	Purl        *string `json:"purl,omitempty"`
	Repository  *struct {
		Source *ReleaseDetailRepositorySource `json:"source,omitempty"`
		Url    *string                        `json:"url"`
	} `json:"repository,omitempty"`
	TideliftRecommendation *TideliftReleaseRecommendation   `json:"tidelift_recommendation"`
	Version                *string                          `json:"version,omitempty"`
	Violations             *[]ReleaseDetail_Violations_Item `json:"violations,omitempty"`
}

// ReleaseDetailLicenseSource defines model for ReleaseDetail.License.Source.
type ReleaseDetailLicenseSource string

// ReleaseDetailRepositorySource defines model for ReleaseDetail.Repository.Source.
type ReleaseDetailRepositorySource string

// ReleaseDetail_Violations_Item defines model for ReleaseDetail.violations.Item.
type ReleaseDetail_Violations_Item struct {
	CatalogStandard      *string                `json:"catalog_standard,omitempty"`
	Title                *string                `json:"title,omitempty"`
	ViolationId          *string                `json:"violation_id,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReleaseRequirement defines model for ReleaseRequirement.
type ReleaseRequirement struct {
	Name        *string `json:"name,omitempty"`
	Platform    *string `json:"platform,omitempty"`
	Purl        *string `json:"purl,omitempty"`
	Requirement *string `json:"requirement,omitempty"`
	Scope       *string `json:"scope,omitempty"`
}

// StandardError The standard error format
type StandardError struct {
	// Details An optional object with extra helpful details about the error.
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error An error code representing the error
	Error string `json:"error"`

	// Message A human-readable error message representing the error
	Message string `json:"message"`
}

// TideliftPackageRecommendation defines model for TideliftPackageRecommendation.
type TideliftPackageRecommendation string

// TideliftPackageRecommendationReasons defines model for TideliftPackageRecommendationReasons.
type TideliftPackageRecommendationReasons = []string

// TideliftReleaseRecommendation defines model for TideliftReleaseRecommendation.
type TideliftReleaseRecommendation string

// Vulnerability defines model for Vulnerability.
type Vulnerability struct {
	AffectedPackages []struct {
		AffectedVersions      *[]string                                   `json:"affected_versions,omitempty"`
		Name                  string                                      `json:"name"`
		Package               string                                      `json:"package"`
		Platform              string                                      `json:"platform"`
		Purl                  string                                      `json:"purl"`
		Recommendation        VulnerabilityAffectedPackagesRecommendation `json:"recommendation"`
		RecommendationDetails *struct {
			CreatedAt time.Time `json:"created_at"`

			// FalsePositiveReason Detailed explanation of the false positive result.
			FalsePositiveReason *string `json:"false_positive_reason"`
			Id                  string  `json:"id"`

			// ImpactDescription Detailed explanation of the impact score.
			ImpactDescription *string `json:"impact_description"`

			// ImpactScore When using this package as intended, how likely are users to be affected? A general score out of 10.
			ImpactScore *int `json:"impact_score"`

			// IncludesDev Does this vulnerability apply when the package is only used within a Development or CI environment?
			IncludesDev *bool `json:"includes_dev"`

			// OtherConditions Are there any other conditions that users should check for to determine if they're vulnerable?
			OtherConditions *bool `json:"other_conditions"`

			// OtherConditionsDescription Detailed explanation of the other conditions result.
			OtherConditionsDescription *string `json:"other_conditions_description"`

			// RealIssue Is this a real vulnerability or a false positive?
			RealIssue bool `json:"real_issue"`

			// SpecificMethodsAffected Does this vulnerability apply only if certain methods, classes, or functionality are in use?
			SpecificMethodsAffected *bool `json:"specific_methods_affected"`

			// SpecificMethodsDescription Detailed explanation of the specific methods result.
			SpecificMethodsDescription *string   `json:"specific_methods_description"`
			UpdatedAt                  time.Time `json:"updated_at"`

			// WorkaroundAvailable For users who are unable to upgrade to a supported release, is there a workaround available?
			WorkaroundAvailable *bool `json:"workaround_available"`

			// WorkaroundDescription Detailed explanation of the workaround.
			WorkaroundDescription *string `json:"workaround_description"`
		} `json:"recommendation_details"`
		UnaffectedVersions *string `json:"unaffected_versions"`
	} `json:"affected_packages"`
	CvssScore   *string `json:"cvss_score"`
	Description *string `json:"description"`
	NistUrl     *string `json:"nist_url"`
	Severity    *string `json:"severity"`
	UpdatedAt   *string `json:"updated_at,omitempty"`
	Url         *string `json:"url"`
	VulnId      *string `json:"vuln_id"`
}

// VulnerabilityAffectedPackagesRecommendation defines model for Vulnerability.AffectedPackages.Recommendation.
type VulnerabilityAffectedPackagesRecommendation string

// PackageNameParam defines model for packageNameParam.
type PackageNameParam = string

// PackagePlatformParam defines model for packagePlatformParam.
type PackagePlatformParam = string

// PagePaginationParam defines model for pagePaginationParam.
type PagePaginationParam = int

// PerPagePaginationParam defines model for perPagePaginationParam.
type PerPagePaginationParam = int

// ReleaseVersionParam defines model for releaseVersionParam.
type ReleaseVersionParam = string

// SbomTypeParam defines model for sbomTypeParam.
type SbomTypeParam string

// VulnerabilityIdParam The id of the vulnerability.
type VulnerabilityIdParam = string

// N401Error The standard error format
type N401Error = StandardError

// N404Error The standard error format
type N404Error = StandardError

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Lifted Filter parameter. Filters packages to only those that are lifted or non-lifted.
	Lifted *bool `form:"lifted,omitempty" json:"lifted,omitempty"`

	// SourceRepositoryUrl Filter parameter. Filters packages to only those associated with the url-encoded source repository url.
	SourceRepositoryUrl *string `form:"source_repository_url,omitempty" json:"source_repository_url,omitempty"`

	// SearchableName Filter parameter. Filters packages to those whose name contains the given string.
	SearchableName *string `form:"searchable_name,omitempty" json:"searchable_name,omitempty"`

	// Platform Filter parameter. Filters packages to those matching the given platform.
	Platform *string                 `form:"platform,omitempty" json:"platform,omitempty"`
	Page     *PagePaginationParam    `form:"page,omitempty" json:"page,omitempty"`
	PerPage  *PerPagePaginationParam `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// EolPackagesJSONBody defines parameters for EolPackages.
type EolPackagesJSONBody struct {
	union json.RawMessage
}

// EolPackagesJSONBody0 defines parameters for EolPackages.
type EolPackagesJSONBody0 struct {
	// Packages The packages being looked up
	Packages []Package `json:"packages"`
}

// EolPackagesJSONBody1 defines parameters for EolPackages.
type EolPackagesJSONBody1 struct {
	// Purls Array of properly formatted PURLs
	Purls []string `json:"purls"`
}

// LookupJSONBody defines parameters for Lookup.
type LookupJSONBody struct {
	union json.RawMessage
}

// LookupJSONBody0 defines parameters for Lookup.
type LookupJSONBody0 struct {
	// Packages The packages being looked up
	Packages []Package `json:"packages"`
}

// LookupJSONBody1 defines parameters for Lookup.
type LookupJSONBody1 struct {
	// Purls Array of properly formatted PURLs
	Purls []string `json:"purls"`
}

// UpdatesSinceParams defines parameters for UpdatesSince.
type UpdatesSinceParams struct {
	Page    *PagePaginationParam    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPagePaginationParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Date The date to search for changes on or after
	Date openapi_types.Date `form:"date" json:"date"`
}

// ReleaseDependenciesParams defines parameters for ReleaseDependencies.
type ReleaseDependenciesParams struct {
	Page    *PagePaginationParam    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPagePaginationParam `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ReleaseSbomParams defines parameters for ReleaseSbom.
type ReleaseSbomParams struct {
	// SbomType The type the SBOM to generate. Required, unless older sbom_format parameter is passed.
	SbomType *ReleaseSbomParamsSbomType `form:"sbom_type,omitempty" json:"sbom_type,omitempty"`
}

// ReleaseSbomParamsSbomType defines parameters for ReleaseSbom.
type ReleaseSbomParamsSbomType string

// LookupReleasesJSONBody defines parameters for LookupReleases.
type LookupReleasesJSONBody struct {
	union json.RawMessage
}

// LookupReleasesJSONBody0 defines parameters for LookupReleases.
type LookupReleasesJSONBody0 struct {
	// Releases The releases being looked up.
	Releases []Release `json:"releases"`
}

// LookupReleasesJSONBody1 defines parameters for LookupReleases.
type LookupReleasesJSONBody1 struct {
	// Purls Array of properly formatted PURLs
	Purls []string `json:"purls"`
}

// EolPackagesJSONRequestBody defines body for EolPackages for application/json ContentType.
type EolPackagesJSONRequestBody EolPackagesJSONBody

// LookupJSONRequestBody defines body for Lookup for application/json ContentType.
type LookupJSONRequestBody LookupJSONBody

// LookupReleasesJSONRequestBody defines body for LookupReleases for application/json ContentType.
type LookupReleasesJSONRequestBody LookupReleasesJSONBody

// Getter for additional properties for ReleaseDetail_Violations_Item. Returns the specified
// element and whether it was found
func (a ReleaseDetail_Violations_Item) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReleaseDetail_Violations_Item
func (a *ReleaseDetail_Violations_Item) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReleaseDetail_Violations_Item to handle AdditionalProperties
func (a *ReleaseDetail_Violations_Item) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["catalog_standard"]; found {
		err = json.Unmarshal(raw, &a.CatalogStandard)
		if err != nil {
			return fmt.Errorf("error reading 'catalog_standard': %w", err)
		}
		delete(object, "catalog_standard")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["violation_id"]; found {
		err = json.Unmarshal(raw, &a.ViolationId)
		if err != nil {
			return fmt.Errorf("error reading 'violation_id': %w", err)
		}
		delete(object, "violation_id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReleaseDetail_Violations_Item to handle AdditionalProperties
func (a ReleaseDetail_Violations_Item) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CatalogStandard != nil {
		object["catalog_standard"], err = json.Marshal(a.CatalogStandard)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'catalog_standard': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.ViolationId != nil {
		object["violation_id"], err = json.Marshal(a.ViolationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'violation_id': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsPackageAppearsMaintainedAdditionalDataMaintenanceAppearance returns the union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData as a PackageAppearsMaintainedAdditionalDataMaintenanceAppearance
func (t PackageAppearsMaintainedQualityCheck_AdditionalData) AsPackageAppearsMaintainedAdditionalDataMaintenanceAppearance() (PackageAppearsMaintainedAdditionalDataMaintenanceAppearance, error) {
	var body PackageAppearsMaintainedAdditionalDataMaintenanceAppearance
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAppearsMaintainedAdditionalDataMaintenanceAppearance overwrites any union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData as the provided PackageAppearsMaintainedAdditionalDataMaintenanceAppearance
func (t *PackageAppearsMaintainedQualityCheck_AdditionalData) FromPackageAppearsMaintainedAdditionalDataMaintenanceAppearance(v PackageAppearsMaintainedAdditionalDataMaintenanceAppearance) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAppearsMaintainedAdditionalDataMaintenanceAppearance performs a merge with any union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData, using the provided PackageAppearsMaintainedAdditionalDataMaintenanceAppearance
func (t *PackageAppearsMaintainedQualityCheck_AdditionalData) MergePackageAppearsMaintainedAdditionalDataMaintenanceAppearance(v PackageAppearsMaintainedAdditionalDataMaintenanceAppearance) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackageAppearsMaintainedAdditionalDataMaintenanceAssessment returns the union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData as a PackageAppearsMaintainedAdditionalDataMaintenanceAssessment
func (t PackageAppearsMaintainedQualityCheck_AdditionalData) AsPackageAppearsMaintainedAdditionalDataMaintenanceAssessment() (PackageAppearsMaintainedAdditionalDataMaintenanceAssessment, error) {
	var body PackageAppearsMaintainedAdditionalDataMaintenanceAssessment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAppearsMaintainedAdditionalDataMaintenanceAssessment overwrites any union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData as the provided PackageAppearsMaintainedAdditionalDataMaintenanceAssessment
func (t *PackageAppearsMaintainedQualityCheck_AdditionalData) FromPackageAppearsMaintainedAdditionalDataMaintenanceAssessment(v PackageAppearsMaintainedAdditionalDataMaintenanceAssessment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAppearsMaintainedAdditionalDataMaintenanceAssessment performs a merge with any union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData, using the provided PackageAppearsMaintainedAdditionalDataMaintenanceAssessment
func (t *PackageAppearsMaintainedQualityCheck_AdditionalData) MergePackageAppearsMaintainedAdditionalDataMaintenanceAssessment(v PackageAppearsMaintainedAdditionalDataMaintenanceAssessment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackageAppearsMaintainedAdditionalDataIsLifted returns the union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData as a PackageAppearsMaintainedAdditionalDataIsLifted
func (t PackageAppearsMaintainedQualityCheck_AdditionalData) AsPackageAppearsMaintainedAdditionalDataIsLifted() (PackageAppearsMaintainedAdditionalDataIsLifted, error) {
	var body PackageAppearsMaintainedAdditionalDataIsLifted
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAppearsMaintainedAdditionalDataIsLifted overwrites any union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData as the provided PackageAppearsMaintainedAdditionalDataIsLifted
func (t *PackageAppearsMaintainedQualityCheck_AdditionalData) FromPackageAppearsMaintainedAdditionalDataIsLifted(v PackageAppearsMaintainedAdditionalDataIsLifted) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAppearsMaintainedAdditionalDataIsLifted performs a merge with any union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData, using the provided PackageAppearsMaintainedAdditionalDataIsLifted
func (t *PackageAppearsMaintainedQualityCheck_AdditionalData) MergePackageAppearsMaintainedAdditionalDataIsLifted(v PackageAppearsMaintainedAdditionalDataIsLifted) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackageAppearsMaintainedQualityCheckAdditionalData3 returns the union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData as a PackageAppearsMaintainedQualityCheckAdditionalData3
func (t PackageAppearsMaintainedQualityCheck_AdditionalData) AsPackageAppearsMaintainedQualityCheckAdditionalData3() (PackageAppearsMaintainedQualityCheckAdditionalData3, error) {
	var body PackageAppearsMaintainedQualityCheckAdditionalData3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAppearsMaintainedQualityCheckAdditionalData3 overwrites any union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData as the provided PackageAppearsMaintainedQualityCheckAdditionalData3
func (t *PackageAppearsMaintainedQualityCheck_AdditionalData) FromPackageAppearsMaintainedQualityCheckAdditionalData3(v PackageAppearsMaintainedQualityCheckAdditionalData3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAppearsMaintainedQualityCheckAdditionalData3 performs a merge with any union data inside the PackageAppearsMaintainedQualityCheck_AdditionalData, using the provided PackageAppearsMaintainedQualityCheckAdditionalData3
func (t *PackageAppearsMaintainedQualityCheck_AdditionalData) MergePackageAppearsMaintainedQualityCheckAdditionalData3(v PackageAppearsMaintainedQualityCheckAdditionalData3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageAppearsMaintainedQualityCheck_AdditionalData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageAppearsMaintainedQualityCheck_AdditionalData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageAttestationStatementIncomeStreams0 returns the union data inside the PackageAttestationStatement_IncomeStreams as a PackageAttestationStatementIncomeStreams0
func (t PackageAttestationStatement_IncomeStreams) AsPackageAttestationStatementIncomeStreams0() (PackageAttestationStatementIncomeStreams0, error) {
	var body PackageAttestationStatementIncomeStreams0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAttestationStatementIncomeStreams0 overwrites any union data inside the PackageAttestationStatement_IncomeStreams as the provided PackageAttestationStatementIncomeStreams0
func (t *PackageAttestationStatement_IncomeStreams) FromPackageAttestationStatementIncomeStreams0(v PackageAttestationStatementIncomeStreams0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAttestationStatementIncomeStreams0 performs a merge with any union data inside the PackageAttestationStatement_IncomeStreams, using the provided PackageAttestationStatementIncomeStreams0
func (t *PackageAttestationStatement_IncomeStreams) MergePackageAttestationStatementIncomeStreams0(v PackageAttestationStatementIncomeStreams0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackageAttestationStatementIncomeStreams1 returns the union data inside the PackageAttestationStatement_IncomeStreams as a PackageAttestationStatementIncomeStreams1
func (t PackageAttestationStatement_IncomeStreams) AsPackageAttestationStatementIncomeStreams1() (PackageAttestationStatementIncomeStreams1, error) {
	var body PackageAttestationStatementIncomeStreams1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAttestationStatementIncomeStreams1 overwrites any union data inside the PackageAttestationStatement_IncomeStreams as the provided PackageAttestationStatementIncomeStreams1
func (t *PackageAttestationStatement_IncomeStreams) FromPackageAttestationStatementIncomeStreams1(v PackageAttestationStatementIncomeStreams1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAttestationStatementIncomeStreams1 performs a merge with any union data inside the PackageAttestationStatement_IncomeStreams, using the provided PackageAttestationStatementIncomeStreams1
func (t *PackageAttestationStatement_IncomeStreams) MergePackageAttestationStatementIncomeStreams1(v PackageAttestationStatementIncomeStreams1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageAttestationStatement_IncomeStreams) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageAttestationStatement_IncomeStreams) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
